#服务中心注册的服务名
spring.application.name=client-ribbon
server.port=8910
eureka.client.service-url.defaultZone=http://localhost:9998/eureka/


service.hello.url=http://service-hello/

ribbon.http.client.enabled=true

#导入retry 包后默认为true，失败后重试为开
spring.cloud.loadbalancer.retry.enabled=true
# 最大的重试次数，不包括第一次请求
ribbon.MaxAuetoRtries=3
# 最大重试server的个数，不包括第一个 server
ribbon.MaxAutoRetriesNextServer=2
#是否开启任何异常都重试
ribbon.OkToRetryOnAllOperations=true


###resilience4j断路器配置介绍
###resilience4j断路器配置介绍
###resilience4j断路器配置介绍


#Retry 的一个优先级。默认情况下， Retry 的优先级高于 bulkhead 、 Circuit breaker 以及 rateLimiter ，即 Retry 会先于另外三个执行。
# Retry、 bulkhead 、 Circuit breaker 以及 rateLimiter 的优先级数值默认分别是 Integer.MAX_VALUE-3、Integer.MAX_VALUE-2、Integer.MAX_VALUE-1 以及 Integer.MAX_VALUE ，即数值越小，优先级越高；
resilience4j.retry.retry-aspect-order=399
#backends 属性中我们可以配置不同的 Retry 策略，给不同的策略分别取一个名字， retryBackendA 就是一个 Retry 策略的名字
#最大重试次数
resilience4j.retry.backends.retryBackendA.max-retry-attempts=3
#下一次重试等待时间，最小100ms
resilience4j.retry.backends.retryBackendA.wait-duration=600
#重试事件缓冲区大小
resilience4j.retry.backends.retryBackendA.event-consumer-buffer-size=1
#是否开启指数退避抖动算法，当一次调用失败后，如果在相同的时间间隔内发起重试，有可能发生连续的调用失败，因此可以开启指数退避抖动算法
resilience4j.retry.backends.retryBackendA.enable-exponential-backoff=true
#表示退避抖动算法的时间间隔乘数
resilience4j.retry.backends.retryBackendA.exponential-backoff-multiplier=2
#表示下次重试的时间间隔是否随机; enableRandomizedWait 和 enableExponentialBackoff 默认为 false ，并且这两个不可以同时开启
resilience4j.retry.backends.retryBackendA.enable-randomized-wait=false
#什么样的异常会被认定为请求失败，这里的RecordFailurePredicate是一个自定义的类；
resilience4j.retry.backends.retryBackendA.retry-exception-predicate=com.sgp.ribbonclient.predicate.RecordFailurePredicate
#需要重试的异常
resilience4j.retry.backends.retryBackendA.retry-exceptions=java.lang.ArithmeticException
#忽略的异常
resilience4j.retry.backends.retryBackendA.ignore-exceptions=com.sgp.ribbonclient.exception.IgnoredException



#circuitbreakerA是断路器策略的命名，和 Retry 类似，一会也是通过注解来引用这个策略
#环形缓冲区的大小(请求次数超过这个大小，才会开始计算阈值百分比)
resilience4j.circuitbreaker.backends.circuitbreakerA.ring-buffer-size-in-closed-state=2
#表示断路器处于 HalfOpen 状态下，环形缓冲区的大小
resilience4j.circuitbreaker.backends.circuitbreakerA.ring-buffer-size-in-half-open-state=2
#表示断路器从 open 切换到 half closed 状态时，需要保持的时间
resilience4j.circuitbreaker.backends.circuitbreakerA.wait-interval=5000
#表示故障率阈值百分比，超过这个阈值，断路器就会打开
resilience4j.circuitbreaker.backends.circuitbreakerA.failure-rate-threshold=50
#表示事件缓冲区大小
resilience4j.circuitbreaker.backends.circuitbreakerA.event-consumer-buffer-size=10
#表示开启健康检测
resilience4j.circuitbreaker.backends.circuitbreakerA.register-health-indicator=true

resilience4j.circuitbreaker.backends.circuitbreakerA.record-exceptions=

resilience4j.circuitbreaker.backends.circuitbreakerA.ignore-exceptions=
